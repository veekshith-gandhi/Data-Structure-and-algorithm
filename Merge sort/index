** merge sort is basicaly divide and concur rule
** divide into small parts and combine

* Merge-procedure-> input 2 sorted array output sorted array of those two
*Time Complexity = order of nlogn

# Merge Sort

**Difficulty: Medium**

**Prerequisite: Recursion and Divide and Conquer**

**Problem Statement:**

Implement the merge sort right from the scratch

**Hint:**

None

**Short Explanation:**

- Merge sort works on the principal of Divide and Conquer

- It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.

- The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one

- for better understanding please see this [lecture](https://learn.masaischool.com/lecture/6971) , where I explained in great detail about merge sort.

**Detailed Explanation:**

- The main thing in the merge sort is, merge procedure, so let's see about merge function

- in merge function, the input to is two sorted arrays, it is going to take two sorted arrays and produce the final one sorted array

- Let's see whole merge sort algorithm

```

MergeSort(arr[], l,  r)

If r > l

1.Find the middle point to divide the array into two halves:

middle m = l+ (r-l)/2

2.Call mergeSort for first half:

Call mergeSort(arr, l, m)

3. Call mergeSort for second half:

Call mergeSort(arr, m+1, r)

4.Merge the two halves sorted in step 2 and 3:

Call merge(arr, l, m, r)

```

**Pseudo code:**

```c

function mergesort(int arr[], int l, int r)

{

if (l < r) {

// Find the middle point

int m =l+ (r-l)/2;

// Sort first and second halves

mergesort(arr, l, m);

merge(arr, m + 1, r);

// Merge the sorted halves

merge(arr, l, m, r);

}

}

//merge function

function merge(int arr[], int l, int m, int r)

{

// Find sizes of two subarrays to be merged

int n1 = m - l + 1;

int n2 = r - m;

/* Create temp arrays */

int L[] = new int[n1];

int R[] = new int[n2];

/*Copy data to temp arrays*/

for (int i = 0; i < n1; ++i)

L[i] = arr[l + i];

for (int j = 0; j < n2; ++j)

R[j] = arr[m + 1 + j];

/* Merge the temp arrays */

// Initial indexes of first and second subarrays

int i = 0, j = 0;

// Initial index of merged subarry array

int k = l;

while (i < n1 && j < n2) {

if (L[i] <= R[j]) {

arr[k] = L[i];

i++;

}

else {

arr[k] = R[j];

j++;

}

k++;

}

/* Copy remaining elements of L[] if any */

while (i < n1) {

arr[k] = L[i];

i++;

k++;

}

/* Copy remaining elements of R[] if any */

while (j < n2) {

arr[k] = R[j];

j++;

k++;

}

}

```

**Time Complexity:**

- merge function is going to take **O(n)** time.

- the recurrence relation for the merge sort is

T(n) = 2T(n/2) + n  ; n>1

T(n) = 1                   ; n==1

- so if you solve the above recurrence relation by using back substitution we can get the time complexity as **O(nlogn)**

**Space Complexity:**

**O(n) ,** which is for merge operation, we need to take extra temporary array of size n

**Alternate Solution:**

None